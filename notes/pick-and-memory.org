In the program:

#+begin_src c
  i32* ptr = alloca i64;
  i32 x = ptoi ptr;
#+end_src

~x~ will be a ~uvalue~ integer value that ranges between all of the
free locations in memory that can fit an ~i64~.

** Memory in Prop

One solution is that the memory model is in ~Prop~, and so the
pointers returned by ~alloca~ can really just be "physical" integer
addresses into the memory model, and ~ptoi~ is basically a noop.

** Abstract pointers and allocation handlers

Alternatively the memory model returns abstract pointer values and
then we raise a ~PtoI~ event (handled *not* by the memory handler, but
some *separate* allocation handler). This allocation handler can be in
~Prop~ and can have an executable version.  In theory this would mean
that simple loads / stores work fine concretely, but...  I don't think
this can work, though, because things end up needing to emit events
from previous stages...

- GEP remains a memory event????
  + Remove UVALUE_GetElementPtr? Can't... Have to have delayed evaluation of them...
    * Pick needs to emit GEP events, or know how to do GEP on abstract pointer values.
  + What do we do about uvalue parameters to GEP?
- PToI and IToP become "allocation" or "cast" events with a separate
  handler.
  + These also need to take uvalue arguments, which mean they need to
    emit pick events or do concretization on their own.
  + Pick needs to be able to raise PToI and IToP events, though...
    #+begin_src c
      ptr = itop (y + undef);
      x = ptoi ptr + undef;
      return x;
    #+end_src

This also brings back separate logical and concrete memory, so I'm a
little nervous. All memory is still infinite, so while ~PtoI~
represents a concrete allocation, the concrete memory is also
infinite, so that allocation can't technically fail. ~PtoI~ will never
fail for ~intptr~ types, and ~ItoP~ will never fail... Might be fine.

** Some kind of assertion event

The memory model emits ~assert~ events that somehow constrain the set
of values... Maybe ~alloca~ just returns ~undef~ and we ~assert~ that
it concretizes to a free address...

This wouldn't be executable, so we'd need a separate memory handler
that spits out a real address instead of ~undef~...

Or maybe ~alloca~ returns a logical address, and ~ptoi~ returns an
~undef~ and raises an ~assert~ that it concretizes to a free physical
address...

Will need separate concrete and logical memory as above.

I don't really understand the particulars of how this one would work
yet. ~assert~ would need to have knowledge about the state of memory...

Maybe if I have a program like this...

#+begin_src c
  p1 = alloca;
  p2 = alloca;
#+end_src

I'd end up with assertions like...

#+begin_src coq
  Variable check_memory_state_description : MemoryStateDescription -> Prop.

  (* Get a new memory state description where `ptr` is allocated *)
  Variable allocated : ptr -> MemoryStateDescription -> MemoryStateDescription.

  Variant Assert :=
    | assert : MemoryStateDescription -> MemoryStateDescription.

  assert (fun msd : MemoryStateDescription => allocated p1 msd)
  assert (fun msd : MemoryStateDescription => allocated p2 msd)
#+end_src

And the assert handler would be something like...

#+begin_src coq
  Definition assert_handler (a : Assert) : stateT MemoryStateDescription (itree E)
    := fun (ms : MemoryStateDescription) =>
         match a with
         | (assert assertion) =>
             assertion ms
         end.

  Definition model_asserts : itree (Assert +' E) ~> PropT E
    := fun t t' =>
         let it := runStateT (interp assert_handler t) empty_msd (* : itree E (MemoryStateDescription, T) *)
         in
         t' â‰ˆ fmap snd it /\
           (* Probably less silly way to do this... *)
           (eutt (fun _ msd => check_memory_state_description msd) it it)
#+end_src

Does this get run before pick...? After? Does it matter?

* Reframing the memory problem...

Hmmmm. So, like, lemme see if I can reframe our problem a bit. Memory
is non-deterministic, in some sense that means interactions with it
should end up in ~PropT~, because we will have a set of different
possible executions from interacting with memory. We don't like ~PropT~,
so it might be nice if we could somehow delay thinking about the
non-determinism, and isolate it to the operations that are /actually/
non-deterministic. If we just had ~alloca / load / store~ we would have
a deterministic memory model, but because we can take physical
addresses with ~ptoi~ we get information about the layout of memory, and
the layout of memory should be non-deterministic.

So there's a couple questions about where our source of non-determinism comes from:

- ~alloca~ can be non-deterministic and ~ptoi~ would just be a
  noop. This is how we more naturally think of things --- allocation
  is where we reserve a physical location, and that physical location
  could be any previously free spot in memory.
-  Instead we could have ~ptoi~ make the non-deterministic choice, but
  then we need some way to make sure it locks in the choice for future
  calls to ~ptoi~ (should be doable if ~ptoi~ is an event?)

Because we're trying to delay non-determinism as much as possible,
instead of interpreting ~alloca~ or ~ptoi~ into ~PropT~ we're punting
around the idea of delaying non-determinism until we handle ~pick~
events, and so we are thinking of just reusing ~pick~ itself, and then
raising some kind of ~assert~ event that would constrain the values that
we get back from ~pick~. This is basically identical to the old pick
propositions, except maybe we'll have different levels of ~asserts~ and
they'll have access to the state for each level of interpretation, so
we can have one level of ~assert~ that has access to the memory.

** Alloca is non-deterministic

Using ~asserts~ if we wanted to put the nondeterminism in ~alloca~ we
mostly do something like this:

#+begin_src coq
  uv <- trigger alloca;; v <- pick uv;; assert (fresh v);; LWr x v
#+end_src

However, it's not enough to just do ~assert (fresh v)~ , ~v~ needs to
interact with the memory state somehow... So, maybe ~alloca~ is actually
implemented as:

#+begin_src coq
  v <- pick undef;;
  assert (fun m => fresh v m);;
  phys_allocate v size
#+end_src

where ~phys_allocate~ is an event that takes a physical address and
stores it in the concrete memory model (right now it has to be an
event so the assertions can check the resulting concrete memory)... In
fact, this could be cleaned up to just be:

#+begin_src coq
  v <- pick undef;;
  phys_allocate v size
#+end_src

where ~phys_allocate~ raises ~UB~ if there's a collision, and then we
don't even need assertions, and technically this can all just be in
~stateT concrete_memory~ or something, because really there's one
meaningful implementation of ~phys_allocate~. Here ~ptoi~ and ~itop~ are
simple ~noops~.

** Ptoi is non-deterministic

If we want to delay nondeterminism until ~ptoi~ happens... We need
separate logical and concrete memory again. Then ~alloca~ will just
return a logical address (instead of a concrete physical address as
before), these can just be numbers drawn sequentially. Then:

#+begin_src coq
  ptoi addr = v <- pick undef;; phys_allocate v size addr.
#+end_src

~phys_allocate~ will raise ~UB~ if ~v~ isn't a valid location, and
~phys_allocate~ must also take the logical address ~addr~ into account
and register it somewhere because ~itop~ will need to look up the
logical address from the concrete memory.

** A note about ItoP

~itop~ can take a ~uvalue~ as an argument that /should not/ be ~picked~.

If I have ~itop x~ and ~x~ is a ~uvalue~ that represents a set of
values, like say ~x = {(int)ptr1, (int)ptr2}~, it must be the case
that ~itop x = {ptr1, ptr2}~. This is vital if the result of ~itop~ is
used in a ~load~ or ~store~ address --- we need to assert that these
~uvalues~ serialize to a unique address.

We have two possible cases for our memory model, as above:

- In case 1, ~alloca~ is non-deterministic: this is easy because
  ~ptoi / itop~ are basically just ~noops~.
- In case 2, ~ptoi~ is non-deterministic: ~itop x~ needs do some kind of
  nondeterministic lookup on the concrete memory to find a set of
  possible logical addresses. ~x~ should not be picked yet, so we have
  to return some ~uvalue~ that contains enough information to delay this
  computation --- so, we need a ~UVALUE_IToP~ constructor and it needs
  to contain the whole concrete memory... Which might be okay.

* What should we do?

Ideally we get the behaviour from making ~ptoi~ non-deterministic. In
this case ~alloca / load / store / GEP~ can all be deterministic, and
we can reason about programs that use this subset of operations
without going into ~PropT~. In this case ~ptoi / itop~ would be
handled by a separate set of events that we could interpret
later. ~MemPush / MemPop~ have to deal with both the concrete and
logical memory, and it may be the case that we should duplicate these
events -- having a version that deals with logical memory, and a
version that deals with concrete memory.

In summary, to do this we need to:

- Separate ~ptoi / itop~ into a different set of concrete memory events.
- Duplicate ~MemPush / MemPop~ into the concrete memory events.
- Add separate logical / concrete memory structures again
  + This is a fairly big change, but might not be /too/ bad... We
    started with both, and I removed the concrete memory model when it
    ended up being a duplicate...
  + Currently memory looks like this:

    #+begin_src coq
      Inductive UByte :=
      | mkUByte (uv : uvalue) (dt : dtyp) (idx : uvalue) (sid : store_id) : UByte.

      Definition SByte := UByte.

      (* Memory consists of bytes which have a provenance associated with them. *)
      Definition mem_byte := (SByte * AllocationId)%type.
      Definition memory := IntMap mem_byte.
    #+end_src

    + Logical memory technically won't need ~AllocationIds~ associated
      with each byte (though ~store_ids~ are still necessary for
      properly handling ~undef~ values in memory). It will be a map
      from ~AllocationIds~ to blocks of ~SBytes~.
    + Concrete memory will just be an ~IntMap~ of
      ~AllocationIds~... Or maybe
      ~(AllocationId * OffsetIntoLogicalBlock)~ pairs.
      This would make this a map of concrete addresses to logical addresses,
      which could be nice for ~itop~.
      * May want some additional structure for keeping track of which
        logical pointers exist in concrete memory (and where) to make
        sure we don't have to walk over every byte in concrete memory
        for ~ptoi~...
- ~uvalue~ will need a new constructor, something like:

  #+begin_src coq
    | UVALUE_ItoP     (dt_from : dtyp) (x : uvalue) (m : ConcreteMemory.concrete_memory)
  #+end_src

  + Need to be careful that there's no cyclic dependencies between ~uvalue~ and ~ConcreteMemory~
  + Need to expose some ~concrete_memory -> logical_pointer~ function
    for ~Serialization.v~ for ~concretize_uvalueM~ (used in ~pick~
    handling / maybe ~denote_exp~ to evaluate ~uvalues~).
  
** Concerns

The memory model becomes a much more complicated split thing. It's not
as easy to audit the specification, and these changes *do not* make
the memory model more expressive / accurate. I.e., this more
complicated handling of logical + concrete memory should actually be
equivalent to the original formulation where all memory is
concrete. The only reason to do this is that the original formulation
would have to be interpreted into ~PropT~ in order to handle address
allocation non-determinism, and with this alternative formulation we
should be able to separate ~alloca / load / store / GEP~ from ~ptoi /
itop~ in order to delay having to reason in ~PropT~. Ultimately, after
interpreting all events, we should get the same set of itrees for both
implementations...

I can see why this is valuable, and why we might want to make this
change. It does feel dissatisfying to have to complicate the spec to
make for easier reasoning at different levels of interpretation. I'm
not sure there's a better way to organize things to avoid this,
though?

Separating the memory events does force every possible memory model to
provide both logical memory and concrete memory. In theory we could
have the current entirely concrete model for handling ~alloca / load /
store / GEP~, and then use ~unit~ for the type of ~concrete_memory~,
and ~ptoi~ and ~itop~ could be handled by just unwrapping the logical
address (which is really a physical address).

* Modified pick

Another idea is to add a ~pick_addr : MemState -> addr -> PickE Z~
constructor that takes a ~MemState~ and an ~addr~ and produces a
concrete address ~Z~ with no overlap. In theory this can be pretty
generic and not even need ~MemState~ because the concrete address
layout should be straightforward (it's a list of addresses, just have
to pick a free spot)... Using ~MemState~ and ~addr~ means we would
have to look up the ~addr~ in ~MemState~ and be able to calculate the
size of the allocation... Maybe this should be ~pick_addr :
ConcreteMemorySpace -> dtyp -> PickE Z~ or something instead.

Anyway, ~pick_addr~ could then be triggered, and we can use the result
to register the location in concrete memory in the ~MemState~... Using
something like this:

#+begin_src coq
  (** Operations for interacting with the concrete layout of memory. *)
  Parameter reserve_block : MemState -> LP.IP.intptr -> N -> option MemState.
#+end_src

So we could have ~alloca~ be something like this:

#+begin_src coq
  allocate dtyp =
             a <- allocate_logical_addr;;
             ms <- get_mem_state;;
             c <- trigger (pick_addr ms addr);;
             match reserve_block ms c with
             | None => raise_error "Bad allocation of concrete address."
             | Some ms' => put_mem_state ms'
             end
#+end_src

Or we could delay allocation of concrete addresses to avoid pick
events in allocate using:

#+begin_src coq
  ptoi a =
         ms <- get_mem_state;;
         c <- trigger (pick_addr ms addr);;
         match reserve_block ms c with
         | None => raise_error "Bad allocation of concrete address."
         | Some ms' =>
             put_mem_state ms';;
             ret c
         end
#+end_src

But now there's a problem with specifying how memory behaves... Previously we had lemmas like this:

#+begin_src coq
  Lemma interp_memory_alloca :
    forall (m m' : MemState) (t : dtyp) (a : addr),
      ErrSID_runs_to (allocate (ms_memory_stack m) t) (ms_sid m) (ms_prov m) (ms_memory_stack m', a) (ms_sid m') (ms_prov m') ->
      interp_memory (trigger (Alloca t)) m â‰ˆ Ret (m', DVALUE_Addr a).
#+end_src

These kinds of lemmas allow us to rewrite memory events when
interpreted into the state monad, giving us a returned value and a new
memory, with some constraints from ~allocate~ and ~allocate_spec~.

If we want to allow flexibility for where address allocation
nondeterminism is introduced, we have to allow for ~pick_addr~ events
to occur in either ~Alloca~ or ~PtoI~ events. As such neither of these
events can be rewritten to a simple return value, because their
implementation may involve raising this pick event.

This also highlights a problem with generalizing the memory model
interface. The old (horribly named) ~ErrSID~ monad is this:

#+begin_src coq
  (* Need failure, UB, state for store_ids, and state for provenances *)
  Inductive ErrSID_T M A := mkErrSID_T { unErrSID_T : @err_ub_oom_T (stateT store_id (stateT Provenance M)) A }.
  Definition ErrSID := ErrSID_T ident.
#+end_src

It's a monad that allows for failure, ub, oom, and has state for
~store_id~ and ~Provenance~. All of our memory operation are specified
in terms of functions on the ~MemoryState~ under this monad.

Let's rename ~ErrSID~ to ~MemMonad~, and consider it to be a monad
with all of the necessary capabilities to model memory. It could be
something kind of like this:

#+begin_src coq
  Class MemMonad (MemState : Type) (Provenance : Type) (M : Type -> Type)
        `{MonadProvenance Provenance M} `{MonadStoreID M} `{MonadMemState MemState M}
        `{RAISE_ERROR M} `{RAISE_UB M} `{RAISE_OOM M} `{RAISE_PICK M} : Type
    :=
    { MemMonad_runs_to {A} (ma : M A) (ms : MemState) : option (MemState * A);
      MemMonad_lift_stateT
        {E} `{FailureE -< E} `{UBE -< E} `{OOME -< E} {A}
        (ma : M A) : stateT MemState (itree E) A;
    }.
#+end_src

This is exactly the same as ~ErrSID~ was (though, more typeclassy),
but with the addition of a new typeclass, ~RAISE_PICK~... Which is
needed to capture non-determinism.

Ideally I want a lemma like this:

#+begin_src coq
  Lemma interp_memory_alloca :
    forall (m m' : MemState) (t : dtyp) (a : addr),
      MemMonad_runs_to (allocate t) m = Some (m', a) ->
      interp_memory (trigger (Alloca t)) m â‰ˆ Ret (m', DVALUE_Addr a).
#+end_src

Without nondeterminism, the above here would be perfectly reasonable.

With nondeterminism, however... ~MemMonad_runs_to (allocate t) m =
Some (m', a)~ doesn't really make sense... We could potentially
allocate in a bunch of different ways, so ~m'~ and ~a~ could vary
wildly. So maybe we need:

#+begin_src coq
  MemMonad_runs_to {A} (ma : M A) (ms ms' : MemState) (a : A) : Prop
#+end_src

Allowing this to specify a set of valid memory states and results.

 #+begin_src coq
  Lemma interp_memory_alloca :
    forall (m m' : MemState) (t : dtyp) (a : addr),
      MemMonad_runs_to (allocate t) m m' a ->
      interp_memory (trigger (Alloca t)) m â‰ˆ Ret (m', DVALUE_Addr a).
#+end_src

This would be great, but note that ~interp_memory~ is currently just a wrapper around ~interp_state~...

#+begin_src coq
  Definition interp_memory :
    itree Effin ~> MemStateT (itree Effout) :=
    interp_state interp_memory_h.
#+end_src

and the ~interp_memory_alloca~ above is also just using regular
~eutt~. These things are both deterministic, i.e., if ~interp_memory
(trigger (Alloca t)) m~ is ~eutt~ a ~Ret (m', DVALUE_Addr a)~, then
~m'~ and ~a~ must be unique...

Maybe if I just have a concrete memory I could do something like this:

#+begin_src coq
  Lemma interp_memory_alloca :
    forall (m m' : MemState) (t : dtyp) (a : addr),
      MemMonad_runs_to (allocate t) m m' a ->
      interp_memory (trigger (Alloca t)) m â‰ˆ c <- pick_addr m t;; m' <- register_block c m;; Ret (m', DVALUE_Addr a).
#+end_src

But this makes the lemmas depend on the implementation of the memory
model. For instance a memory model with nondeterminism in ~alloca~
needs a lemma with a pick, but if nondeterminism is delayed until
~ptoi~ the ~alloca~ lemma can simply use a return, and the ~ptoi~
lemma instead will need the pick.

Alternatively, if the memory events themselves were interpreted
prepositionally, then the lemmas could actually have a clean and
uniform interface, something like this:

#+begin_src coq
  Lemma interp_memory_alloca :
    forall (m m' : MemState) (t : dtyp) (a : addr),
      MemMonad_runs_to (allocate t) m m' a ->
      refine_memory (interp_memory_prop (trigger (Alloca t)) m) (Ret (m', DVALUE_Addr a)).
#+end_src

* Pick with postconditions

We have moved towards a dependently typed pick event:

#+begin_src coq
  Variant PickE {X Y} {Post : X -> Y -> Prop} : Type -> Type :=
    | pick (Pre : Prop) (x : X) : PickE ({y : Y | Post x y}).
#+end_src

We can now know that the value returned by a pick satisfies the
postcondition. For the memory model this means we can have something
like this:

#+begin_src coq
  Parameter free_concrete_space :
    forall (ms : MemState) (phys_addr : Z) (sz : N), bool.

  Definition PickConcreteMemoryE :=
    @PickE (MemState * (addr * dtyp)) Z
           (fun '(ms, (a, dt)) phys_addr =>
              free_concrete_space ms phys_addr (sizeof_dtyp dt) = true).
#+end_src

Thus whenever we pick a concrete address in memory, we can know that
it is free... So we should be able to prove certain things without
interpreting the pick event. For instance if we know the address is
free we should be able to determine that storing to that address
should not have an impact on any of the other values in memory. If we
didn't have the dependently typed picks, then the returned concrete
address could be any possible ~Z~, and we would end up with cases
where it overlaps with existing blocks in memory.
